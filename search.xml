<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++入门</title>
    <url>/2021/08/08/CPP-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-入门："><a href="#C-入门：" class="headerlink" title="C++ 入门："></a>C++ 入门：</h1><p>这是一系列关于C++学习的教程，</p>
<p>本教程是介于读者有一定<code>Python</code>基础的基础上进行编写的，</p>
<p>我毕竟还是一名学生，所以还是要以<strong>学业为重</strong>，</p>
<p>因此这套教程可能会<strong>烂尾</strong>，但是我会<strong>尽我所能</strong>的更新下去，</p>
<p>相信大家也知道C++是以个非常神奇的语言，</p>
<p>所以在编写过程中大量<em>参(chao)考(xi)</em>了C++ Primer Plus。</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/09/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="美好的故事开始了"><a href="#美好的故事开始了" class="headerlink" title="美好的故事开始了"></a>美好的故事开始了</h1><h4 id="我又给自己挖了一个大坑"><a href="#我又给自己挖了一个大坑" class="headerlink" title="我又给自己挖了一个大坑"></a>我又给自己挖了一个大坑</h4><h4 id="愿世界一切都好！"><a href="#愿世界一切都好！" class="headerlink" title="愿世界一切都好！"></a>愿世界一切都好！</h4>]]></content>
  </entry>
  <entry>
    <title>Ultraman</title>
    <url>/2021/05/01/Ultraman/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    刚上完体育课，我的同桌便说:累哦！ 说完他变成了光。 </p>
<p>​    一天，我问的新同桌:第几节课了？ 同桌没太听清:节课……？杰克!!! 说完他变成了光。 </p>
<span id="more"></span>
<p>​    又有一天，我们学校要组织表演，班长就命令我们:抬锣! 说完他变成了光。 又又有一天，我在哼歌:爱地魔力转圈圈…… 同桌:啥？爱迪？ 说完他变成了光。 ……</p>
<p>by <strong>地球仪太平洋公共广告栏</strong></p>
<p>​    那一年，迪迦倒在了大海里，失去了最后的希望那里充满了黑暗，我哭着拿起了家里的手电筒照向了电视机。</p>
<p>by  <strong>铃屋什造爱吃甜</strong></p>
<p>​    上化学课，化学老师说：“滴加，滴加！”</p>
<p>于是化学老师变成了光，可惜滴加太多着火了，我拿起盖子大叫：“盖呀！”</p>
<p>于是我也变成了光，火势太大惊动了校长，校长说：“哦不，水呢？”</p>
<p>于是校长也变成了光，同学指着杯子大喊：“杯里呀！”</p>
<p>于是这个同学进入了黑暗至今没出来。</p>
<p>by  <strong>野-生-沙-雕</strong></p>
<p>一天晚上小孩儿问爷爷：“爷爷，这个世界上真的有迪迦奥特曼吗？”</p>
<p>爷爷说：“世界上哪有什么迪迦奥特曼，好好睡觉吧，明天还要上学呢。”</p>
<p>然后小孩儿睡着了。这时天空一声巨响，一道闪电劈了下来。爷爷看了看窗外，</p>
<p>拿出了那把已生锈的变身器，冷笑一声说“该来的还是来了，老朋友，这可能是咱们最后一战</p>
<p>by  <strong>平号5678</strong></p>
<p>近战无敌：迪迦 </p>
<p>对波开挂：戴拿 </p>
<p>大地破坏者：盖亚 </p>
<p>逼王：阿古茹 </p>
<p>炎头队长：佐菲 </p>
<p>逗比日常：麦克斯 </p>
<p>债王：欧布，捷德 </p>
<p>黑暗君主：贝利亚 </p>
<p>神秘四奥：奥特之王，诺亚，赛迦，雷杰多 </p>
<p>奥特六兄弟：奥特曼，佐菲，赛文，杰克，艾斯，泰罗（后续加入者：雷欧，阿斯特拉，爱迪，梦比优斯，希卡利） </p>
<p>开挂：赛罗</p>
<p>by <strong>神游四海_</strong></p>
<h3 id="哈哈哈哈哈"><a href="#哈哈哈哈哈" class="headerlink" title="哈哈哈哈哈"></a>哈哈哈哈哈</h3>]]></content>
      <categories>
        <category>None</category>
      </categories>
      <tags>
        <tag>Ultraman</tag>
      </tags>
  </entry>
  <entry>
    <title>再见 CentOS！</title>
    <url>/2022/01/01/%E5%86%8D%E8%A7%81CentOS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2020 年 12 月 8 日，CentOS 官方宣布 CentOS Linux 项目将停止，其中包括 CentOS Linux 8 作为 RHEL 8 的复刻版本，将在 2021 年 12 月 31 日停止维护。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>再见，2024</title>
    <url>/2024/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2024/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    一年又是不知不觉的度过了，2025，一个陌生的年份，也变就在明天。想起来，2024我好像还没有写熟，就来到了2025。或许说，年，就像是一个记号，并没有任何实际意义，可对于2024这个记号所代表的时间里，却有着对于我的许多记忆。</p>
<p>​    2024，想起来还是在初中和同学在雨里踢球的日子，是暑假没命打球的日子，而如今，离开它也不过是4小时不到的长度。我也体会到了许多，我把他们写在了纸上，一张又一张。这一年里，我好像放下了很多，也新识了很多，年末又想重新拾起很多……</p>
<p>​    2025，不用说你好，也不用说什么新年好，它自然会到来（或许也可能是我不太习惯过公历新年的原因）。然而2024，我想道一声再见。还记得，初中时，语文老师每到这个时候都会带我们读《南方周末》的新年献词，如今，物是人非，在那个不大的校园里，还会有同学们朗诵起那些献词吗？</p>
<p>​    2024有太多值得回忆的地方。不过，事到如今，若是只说一句话的话，我想说：</p>
<p>​    晚安，2024；</p>
<p>​    再见，再也不见。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>在文章中添加音乐</title>
    <url>/2021/10/05/%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>此文章就记录一下我在文章中添加音乐的艰辛历程<br><span id="more"></span></p>
<p>(我使用的是hexo-tag-aplayer插件)</p>
<p>首先，需要在站点配置文件内开启meting模式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">	meting: true</span><br></pre></td></tr></table></figure>
<p>复制歌单的链接，然后复制歌单的id \text{id}id，例如 <a href="https://music.163.com/playlist?id=523845661&amp;userid=46562117">https://music.163.com/playlist?id=523845661&amp;userid=46562117</a> ，这个歌单的id就是523845661，公司名可以是tencent、netease或是其他公司，下面给出一个例子，打开 /Hexo/source/playlist/index.md文件，输入</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;7634442256&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参数表如下："><a href="#参数表如下：" class="headerlink" title="参数表如下："></a>参数表如下：</h4><div class="table-container">
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>默认值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td><strong>必须值</strong></td>
<td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>
</tr>
<tr>
<td>server</td>
<td><strong>必须值</strong></td>
<td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr>
<td>fixed</td>
<td><code>false</code></td>
<td>开启固定模式</td>
</tr>
<tr>
<td>mini</td>
<td><code>false</code></td>
<td>开启迷你模式</td>
</tr>
<tr>
<td>loop</td>
<td><code>all</code></td>
<td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td>
</tr>
<tr>
<td>order</td>
<td><code>list</code></td>
<td>列表播放模式： <code>list</code>, <code>random</code></td>
</tr>
<tr>
<td>volume</td>
<td>0.7</td>
<td>播放器音量</td>
</tr>
<tr>
<td>lrctype</td>
<td>0</td>
<td>歌词格式类型</td>
</tr>
<tr>
<td>listfolded</td>
<td><code>false</code></td>
<td>指定音乐播放列表是否折叠</td>
</tr>
<tr>
<td>storagename</td>
<td><code>metingjs</code></td>
<td>LocalStorage 中存储播放器设定的键名</td>
</tr>
<tr>
<td>autoplay</td>
<td><code>true</code></td>
<td>自动播放，移动端浏览器暂时不支持此功能</td>
</tr>
<tr>
<td>mutex</td>
<td><code>true</code></td>
<td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>
</tr>
<tr>
<td>listmaxheight</td>
<td><code>340px</code></td>
<td>播放列表的最大长度</td>
</tr>
<tr>
<td>preload</td>
<td><code>auto</code></td>
<td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>
</tr>
<tr>
<td>theme</td>
<td><code>#ad7a86</code></td>
<td>播放器风格色彩设置</td>
</tr>
</tbody>
</table>
</div>
<p>将来将加入歌单导航栏</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章：开始学习C++</title>
    <url>/2021/09/25/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0CPP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="开始学习C"><a href="#开始学习C" class="headerlink" title="开始学习C++"></a>开始学习C++</h1><p><strong>注意，本教程的所有示例都是基于运行 64 位系统 Windows 10 系统 编写的</strong></p>
<p><strong>编辑器为 JetBrains 赞助的 CLion</strong></p>
<span id="more"></span>
<h3 id="1）进入C"><a href="#1）进入C" class="headerlink" title="1）进入C++"></a>1）进入C++</h3><p>​    这是一个显示消息的C++程序，使用C++工具<code>cout</code>生成字符输出。</p>
<p>你会看到一些<code>//</code>打头的文字，不必担心，这并不是一些高深的语法，这只是注释而已，编译器将自动跳过，就像<code>Python</code>中的<code>#</code>。</p>
<p><strong>C++对大小写敏感，所以，并不能将 <code>cout</code> 写成<code>Cout</code> 或 <code>COUT</code>，程序将无法通过编译，</strong></p>
<p><strong>并且会指出使用了未知的标识符，所像<code>kout</code>和<code>cont</code>都是不可取的。</strong></p>
<p>文件扩展名<code>cpp</code>是一种常用的扩展名，可能会使用其他扩展参见附录一。</p>
<h5 id="例1-1："><a href="#例1-1：" class="headerlink" title="例1.1："></a>例1.1：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; myfirst.cpp -- display a message</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;                                 &#x2F;&#x2F; a PREPROCESSOR directive</span><br><span class="line">int main()                                          &#x2F;&#x2F; function header</span><br><span class="line">&#123;                                                   &#x2F;&#x2F; start of function body</span><br><span class="line">    using namespace std;                            &#x2F;&#x2F; make definitions visible</span><br><span class="line">    cout &lt;&lt; &quot;Hello World Guys!&quot;;                    &#x2F;&#x2F; message</span><br><span class="line">    cout &lt;&lt; endl;                                   &#x2F;&#x2F; start a new line.</span><br><span class="line">    cout &lt;&lt; &quot;This is my first program!&quot; &lt;&lt; endl;    &#x2F;&#x2F; more output</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><h4 id="1）"><a href="#1）" class="headerlink" title="1）"></a>1）</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">C++实现</th>
<th style="text-align:center">源代码文件的扩展名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">UNIX</td>
<td style="text-align:center">C、cc、cxx、c</td>
</tr>
<tr>
<td style="text-align:center">GUN C++</td>
<td style="text-align:center">C、cc、cxx、cpp、c++</td>
</tr>
<tr>
<td style="text-align:center">Digital Mars</td>
<td style="text-align:center">cpp、cxx</td>
</tr>
<tr>
<td style="text-align:center">Borland C++</td>
<td style="text-align:center">cpp</td>
</tr>
<tr>
<td style="text-align:center">Watecom</td>
<td style="text-align:center">cpp</td>
</tr>
<tr>
<td style="text-align:center">Microsoft Visual C++</td>
<td style="text-align:center">cpp、cxx、cc</td>
</tr>
<tr>
<td style="text-align:center">Freestyle Code Warrior</td>
<td style="text-align:center">cp、cpp、cc、cxx、C++</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章：进入C++</title>
    <url>/2021/09/25/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E8%BF%9B%E5%85%A5CPP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第二章：进入-C"><a href="#第二章：进入-C" class="headerlink" title="第二章：进入 C++"></a>第二章：进入 C++</h1><h2 id="内容包括："><a href="#内容包括：" class="headerlink" title="内容包括："></a>内容包括：</h2><ul>
<li>C++ 程序的一般格式；</li>
<li><code>#include</code>  指令；</li>
<li><code>main()</code>  函数；</li>
<li>使用<code>cout</code>对象进行输出；</li>
<li>在C++程序中加入注释；</li>
<li>何时以及如何使用<code>endl</code>；</li>
<li>声明和使用变量；</li>
<li>使用<code>cin</code>对象进行输入；</li>
<li>定义和使用简单函数。</li>
</ul>
<span id="more"></span>
<h2 id="2-1-进入-C"><a href="#2-1-进入-C" class="headerlink" title="2.1 进入 C++"></a>2.1 进入 C++</h2><p><strong>C++对大小写敏感，对拼写也是敏感的，所以不能使用如<code>COUT</code>和<code>Kout</code>等单词</strong></p>
<p><em><code>cpp</code></em>是一种表示 C++ 程序的方式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myfirst.cpp -- display a message</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>                      <span class="comment">// a PREPROCESSOR directive</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                          <span class="comment">// function header</span></span></span><br><span class="line"><span class="function"></span>&#123;                                <span class="comment">// start of function body</span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> std;               <span class="comment">// make definitions visible</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Come up and C++ me some time&quot;</span>; <span class="comment">// message</span></span><br><span class="line">   cout &lt;&lt; endl;                    <span class="comment">// start a new line.</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;You won&#x27;t regret it!&quot;</span> &lt;&lt; endl;    <span class="comment">// more output</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-1-main-函数"><a href="#2-1-1-main-函数" class="headerlink" title="2.1.1 main() 函数"></a>2.1.1 main() 函数</h3><pre><code>去掉修饰后，程序 2.1 的基本结构会是这样
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	statements;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>这几行表明有一个 main 函数，并描述了该函数的行为。
</code></pre><p>这几行代码构成了<strong>函数定义（function definition）</strong>。</p>
<pre><code>该定义有两部分组成：
</code></pre><ol>
<li>第一行  <code>int main()</code>  叫<strong>函数头</strong>。</li>
<li>花括号（<strong>{和}</strong>）中包括的部分叫做函数体。</li>
</ol>
<p><strong>函数体是指出函数因该做什么的计算机指令、在C++中，每一条完整的指令都被称为语句，语句以<code>;</code>结尾。</strong></p>
<p><code>main()</code>中最后一条语句为<strong>结束语句（return statements）</strong>，它用来结束函数。</p>
<h4 id="语句和分号"><a href="#语句和分号" class="headerlink" title="语句和分号"></a>语句和分号</h4><pre><code>语句是要执行的操作，C++ 和 C 不像 Python 或 Pascal 一样使用回车做语句的结尾，终止符是一个分号，它是语句结束的标记，
</code></pre><p>是语句的组成部分，而不是语句之间的标记。结论是<strong>在 C++ 中不能省略分号。</strong></p>
<h5 id="1-作为接口的函数头"><a href="#1-作为接口的函数头" class="headerlink" title="1.作为接口的函数头"></a>1.作为接口的函数头</h5><pre><code>    下面的函数头表明`main()`函数可以调用他的函数返回一个整数值，
</code></pre><p>且不从调用他的函数那里获得任何东西：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<pre><code>    有很多现有的程序使用经典的C语言函数头：
</code></pre><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()</span><br></pre></td></tr></table></figure>
<pre><code>    在C语言中，省略返回类型则默认为 int ，当然可以使用下列变体：
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure>
<pre><code>    括号中的`void`指出函数不接受任何的参数，在C++中，让括号空着等效于在括号中使用`void`

    当然也可以使用下面的函数头，并省略返回语句：
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<pre><code>    如果不在`main()`函数后增加返回语句，编译器将默认为：
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<pre><code>    **这条隐式语句只适用于*`main()`函数***
</code></pre><h5 id="2-为什么-main-不能使用其他名称"><a href="#2-为什么-main-不能使用其他名称" class="headerlink" title="2. 为什么 main()不能使用其他名称"></a>2. 为什么 <code>main()</code>不能使用其他名称</h5><pre><code>    是因为必须这么做，通常C++程序必须包含一个`main()`函数（不是`Main()`、`MAIN()`或`mane()`）

    存在一些列外情况，比如在Windows编程中可以编写一个动态链接库（DLL）模块，

这是其他Windows程序可以使用的代码。由于DLL不是独立的程序，所以不需要`main()`，

亦或是一些框架程序或机器人中的控制芯片。
</code></pre><h3 id="2-1-2-C-注释"><a href="#2-1-2-C-注释" class="headerlink" title="2.1.2  C++ 注释"></a>2.1.2  C++ 注释</h3><pre><code>C++注释以`//`打头，使用时编译器会自动跳过，它可以位于新的一行，也可以和代码在同一行。
</code></pre><p>C++也能识别C语言注释 C 注释包括在 <code>/*</code> 和 <code>*/</code> 之间，由于它以<code>*/</code>结尾，所以可以跨越多行。</p>
<h3 id="2-1-3-C-预处理器和-iostream-文件"><a href="#2-1-3-C-预处理器和-iostream-文件" class="headerlink" title="2.1.3  C++预处理器和 iostream 文件"></a>2.1.3  C++预处理器和 iostream 文件</h3><pre><code>如果要是程序能够进行输入和输出，则会使用如下代码：
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<pre><code>当然可以使用其他代码替换掉第二行，第一行的`#include &lt;iostream&gt;`编译指令使预处理器将`iostream`文件的添加到程序中。
</code></pre><p>这是一种典型的预处理器做法：在源代码被编译之前，替换或添加文本。</p>
<pre><code>这提出了一个问题，为什么要将`iostream`文件的内容添加到程序中呢？
</code></pre><p>答案涉及到程序与外部的通信。<code>iostream</code>中的<code>io</code>是指输入（进入程序的信息）和输出（从程序中发出的信息）。C++的输入和输出方案涉及<code>iostream</code> 文件中的多个定义。为了使用<code>cout</code>来显示消息，第一个程序需要这些定义。为了使用<code>cout</code>来显示消息，第一个程序需要这些定义。</p>
<h1 id="include编译指令导致iostream文件的内容随源代码的内容一起被发送给编译器。实际上，iostream-文件的内容将会取代程序中的代码行"><a href="#include编译指令导致iostream文件的内容随源代码的内容一起被发送给编译器。实际上，iostream-文件的内容将会取代程序中的代码行" class="headerlink" title="include编译指令导致iostream文件的内容随源代码的内容一起被发送给编译器。实际上，iostream 文件的内容将会取代程序中的代码行"></a>include编译指令导致<code>iostream</code>文件的内容随源代码的内容一起被发送给编译器。实际上，<code>iostream</code> 文件的内容将会取代程序中的代码行</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>原始文件没有被修改，而是将源代码文件和<code>iostream</code>组成一个复合文件，编译的下一阶段将要使用到该文件。</p>
<p><strong>注意：使用<code>cin</code>和<code>cout</code>进行输入和输出的程序时必须包含文件<code>iostream</code>。</strong></p>
<h3 id="2-1-4-头文件名"><a href="#2-1-4-头文件名" class="headerlink" title="2.1.4  头文件名"></a>2.1.4  头文件名</h3><pre><code>想`iostream`这样的文件叫做包含文件（include file)——由于他们被包含在其他文件中；也叫做头文件（head file）——
</code></pre><p>由于它们是被包含在文件的起始处。C++编译器自带了许多头文件，每个头文件都支持一组特定的工具。C语言的传统是，头文件</p>
<p>使用扩展名 h，将其作为一种通用名称标识文件类型的基本方式</p>
<p>列如，头文件<code>math.h</code>支持c语言的数学运算函数，但是C++的用法变了。</p>
<p>现在，C++对老式的C语言扩展头<code>.h</code>做了保留，而C++则没有扩展名。</p>
<p>有些C头文件被转换成C++的头文件，并在文件名的最前面加上<code>c</code>来表明他原来是C的头文件，如<code>cmath</code></p>
<p>总而言之</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">头文件类型</th>
<th style="text-align:center">约定</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C++旧式风格</td>
<td style="text-align:center">以<code>.h</code>结尾</td>
<td style="text-align:center"><strong>iostream</strong></td>
<td style="text-align:center">C++</td>
</tr>
<tr>
<td style="text-align:left">C旧式风格</td>
<td style="text-align:center">以<code>.h</code>结尾</td>
<td style="text-align:center"><strong>math.h</strong></td>
<td style="text-align:center">C、C++</td>
</tr>
<tr>
<td style="text-align:left">C++新式风格</td>
<td style="text-align:center">没有扩展名</td>
<td style="text-align:center"><strong>iostream</strong></td>
<td style="text-align:center">C++（使用 namespace std）</td>
</tr>
<tr>
<td style="text-align:left">转换后的C</td>
<td style="text-align:center">加上前缀C，没有扩展名</td>
<td style="text-align:center"><strong>cmath</strong></td>
<td style="text-align:center">C++(可以使用不是C的特性)</td>
</tr>
</tbody>
</table>
</div>
<pre><code>由于C使用不同的扩展名表示不同的文件类型，因此会出现一些不同寻常的扩展名（如`.hpp`和`.hxx`）来表示C++的的头文件是有道理的。
</code></pre><h3 id="2-1-5-名称空间"><a href="#2-1-5-名称空间" class="headerlink" title="2.1.5    名称空间"></a>2.1.5    名称空间</h3><pre><code>如果使用`iostream`，而不是`iostream.h`，则使用如下指令
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<p>不要着急它是干嘛用的，在以后再了解</p>
<pre><code>`namespace`是C++的特性，比如有两个封装好的代码`Microflop`和`Piscine`要想同时使用时该怎么办呢，
</code></pre><p>就不能使用<code>using namespace std</code>了，这时可以使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Microflop::<span class="built_in">wanda</span>(<span class="string">&quot;Go dancing?&quot;</span>)		<span class="comment">//use Microflop namespace stdPiscine::wanda(&quot;A fish named Tom&quot;)	//use Piscine namespace std</span></span><br></pre></td></tr></table></figure>
<p>这就可以区分两个<code>wanda()</code>的不同之处了</p>
<h3 id="2-1-6-使用cout进行C-输出"><a href="#2-1-6-使用cout进行C-输出" class="headerlink" title="2.1.6    使用cout进行C++输出"></a>2.1.6    使用cout进行C++输出</h3><pre><code>现在来看看C++是如何输出信息的，在`myfirst.cpp`中是这样的
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;Come up and C++ me some time&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>双引号括起来的是字符串，也就是要打印的消息。<code>&lt;&lt;</code>把这个字符串发送给<code>cout</code></p>
<p>而<code>cout</code>是一个预定义的对象，它知道如何显示字符</p>
<h4 id="1-控制符endl"><a href="#1-控制符endl" class="headerlink" title="1.控制符endl"></a>1.控制符endl</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>现在来看看这个例子，endl表达一个<strong><em>重要的概念：重起一行（）（输出一段后默认不换行）</em></strong></p>
<p>在输入流中加入它会使光标移至下一行。诸如endl等对cout有意义的字符被称为<strong><em>控制符（manipulator）</em></strong>和cout一样，endl实在iostream中定义的，且位于命名空间std中</p>
<h4 id="2-换行符"><a href="#2-换行符" class="headerlink" title="2.换行符"></a>2.换行符</h4><p>C++还提供了一种旧式用法：<strong>\n</strong></p>
<p>它被视为一个字符<strong><em>换行符</em></strong></p>
<p><strong>换行符是一种被称为”转义序列“的按键组合</strong></p>
<h3 id="2-1-7-C-源码格式化"><a href="#2-1-7-C-源码格式化" class="headerlink" title="2.1.7 C++源码格式化"></a>2.1.7 C++源码格式化</h3><p>在C++中，<code>;</code>代表了语句的结束，通常，<strong><em>在能使用回车的地方也能使用空格，反之亦然</em></strong></p>
<p>但是，<strong>不能把空格、制表符或回车放在元素（如名称），也不能把回车放在字符串中间</strong></p>
<p>如下就是一个错误例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> ma <span class="title">in</span><span class="params">()</span><span class="keyword">return</span> 0</span>;cout &lt;&lt; <span class="string">&quot;Behold the Beans of Beauty!&quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="1-源代码的标记和空白"><a href="#1-源代码的标记和空白" class="headerlink" title="1.源代码的标记和空白"></a>1.源代码的标记和空白</h4><p><strong><em>一行代码中不可分割的一部分叫做标记（token）</em></strong></p>
<p>通常必须用空格、制表符或回车将标记分开。有些字符如<code>,</code>或<code>()</code>是不需要用空白分开的标记</p>
<p>如下举例说明了何种情况需要分开，什么情况下可以省略</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">return0;	<span class="comment">//INVALLD, must be return 0;return(0);	//VALLD, white space omittedreturn (0);	//VALLD, white space useintmain();	//INVALLD, white space omittedint main()	//VALLD, white space omitted in ()int main ()	//VALLD, white space in  ()</span></span><br></pre></td></tr></table></figure>
<h4 id="2-C-源代码风格"><a href="#2-C-源代码风格" class="headerlink" title="2. C++源代码风格"></a>2. C++源代码风格</h4><ul>
<li>每条语句个占一行</li>
<li>每个函数都有一个开始花括号和一个结束花括号，两个花括号个占一行</li>
<li>函数中的语句都要相对于花括号进行缩进</li>
<li>与函数名称相关的花括号周围没有空白</li>
</ul>
<p>前三条规则用来保证代码清晰可读，第四条用来帮助区分函数和一些也使用圆括号的C++内置结构（如循环）</p>
<h2 id="2-2-C-语句"><a href="#2-2-C-语句" class="headerlink" title="2.2    C++语句"></a>2.2    C++语句</h2><pre><code>C++程序是一组函数，而每个函数又是有一组语句组成的
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>int main()&#123;    using namespace std;    <span class="comment">/*    using namespace std；    是一个神奇的东西，叫做 using 编译指令    亦可不使用该指令可在以后的语句中需使用：        iostream::fun();    */</span>    int carrots;         <span class="comment">// declare an interger variable    carrots = 25;        //assign a value to the variable    cout &lt;&lt; &quot;I have &quot;;    cout &lt;&lt; carrots;    cout &lt;&lt; &quot; carrots .&quot;;    cout &lt;&lt; endl;    carrots = carrots - 1;    cout &lt;&lt; &quot;Crunch, Crunch. Now I have &quot; &lt;&lt; carrots &lt;&lt; &quot; carrots. &quot; &lt;&lt; endl;    return 0;&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>空白部分将声明语句和其他语句分开，这是C的常用用法，但在C++中并不常见</p>
<h3 id="2-2-1-申明语句和变量"><a href="#2-2-1-申明语句和变量" class="headerlink" title="2.2.1    申明语句和变量"></a>2.2.1    申明语句和变量</h3><p>例如，在2.2的程序中包含了这样一条声明语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> carrots;</span><br></pre></td></tr></table></figure>
<p>这条语句提供了两个信息：需要的内存，以及该内存单元的名称，这条语句指出程序需要足够的储存来储存一个整数</p>
<p>，在C++中int表示整数——没有小数部分的数字。</p>
<p><strong><em>C++的int类型可以为正，也可为负，但大小取决于实现</em></strong></p>
<p>完成的第二项任务时给储存单元指定名称。在这里，该声明语句指出，此后程序使用名称<code>carrots</code>来标识储存在该内存单元的值。<code>carrot</code>被称为变量，因为它的值可以修改，<strong><em>在C++中，所有的变量必须声明（尽可能在首次使用时声明）</em></strong></p>
<h3 id="2-2-2-赋值语句"><a href="#2-2-2-赋值语句" class="headerlink" title="2.2.2    赋值语句"></a>2.2.2    赋值语句</h3><p>赋值语句将值赋给储存单元，例如，下列语句将25赋给表示变量carrots的内存单元</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">carrots = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>符号<code>=</code>叫做赋值运算符。C++和C语言都有一个特性——可以使用连续赋值运算符。例如下面的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> steinway;<span class="keyword">int</span> baldwin;yamaha = baldwin = steinway = <span class="number">88</span></span><br></pre></td></tr></table></figure>
<p><strong><em>赋值是从右向左进行的</em></strong></p>
<h3 id="2-2-3-cout的新花样"><a href="#2-2-3-cout的新花样" class="headerlink" title="2.2.3    cout的新花样"></a>2.2.3    cout的新花样</h3><p>cout可用于数字和字符串。但是别忘了，<strong><em>整数25和字符串“25”有天壤之别。</em></strong></p>
<p>程序没有打印<code>carrots</code>，而是打印存储在<code>carrots</code>中的整数值。实际上，这两个操作和二为一了。首先，cout将carrots替换为其当前值25，然后把值转换为合适的输出字符。</p>
<h2 id="2-3-其他C-语句"><a href="#2-3-其他C-语句" class="headerlink" title="2.3    其他C++语句"></a>2.3    其他C++语句</h2><p>再来看几个C++语句的例子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getinfo.cpp -- input and output</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> carrots;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;How many carrots do you have?&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; carrots; <span class="comment">// C++ input</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Here are two more.&quot;</span>;</span><br><span class="line">    carrots = carrots + <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// the next line concatenates output</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Now you have&quot;</span> &lt;&lt; carrots &lt;&lt; <span class="string">&quot; carrots .&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一条cin语句在输入输入数字按下enter建时读取输入，第二个cin语句让程序暂停，直到摁下enter建。</p>
<h3 id="2-3-1-使用cin"><a href="#2-3-1-使用cin" class="headerlink" title="2.3.1    使用cin"></a>2.3.1    使用cin</h3><p>上面的输出表明，从键盘中输入的值（12）会被最终赋值给carrots。下面就是执行这项功能的语句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; carrots;</span><br></pre></td></tr></table></figure>
<p>从这条语句可知，信息从cin流向carrots</p>
<h3 id="2-3-2-使用cout进行拼接"><a href="#2-3-2-使用cout进行拼接" class="headerlink" title="2.3.2    使用cout进行拼接"></a>2.3.2    使用cout进行拼接</h3><p>getinfo.cpp的一项新特性是将四条语句合并成一条。iostream定义了&lt;&lt;运算，以便可以像下面这样合并（拼接）输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;a&quot;</span> &lt;&lt; <span class="string">&quot;b&quot;</span> &lt;&lt; <span class="string">&quot;c&quot;</span> &lt;&lt; <span class="string">&quot;d&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>也可以这样写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;a&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>当然也可以这样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;a&quot;</span></span><br><span class="line">     &lt;&lt; <span class="string">&quot;b&quot;</span></span><br><span class="line">     &lt;&lt; <span class="string">&quot;c&quot;</span></span><br><span class="line">     &lt;&lt; <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-4-类简介"><a href="#2-3-4-类简介" class="headerlink" title="2.3.4    类简介"></a>2.3.4    类简介</h3><p>类是用户定义的一种数据类型。要定义类需要描述它能够表示什么东西和可对数据进行哪些操作。</p>
<p>类之于对象就像类型之于变量。</p>
<p>接下来更具体一些，前文中讲过下面的变量声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> carrots;</span><br></pre></td></tr></table></figure>
<p>这句代码将创建一个类型为int的变量。也就是说carrots可以储存整数可以按特定的方法使用，比如说加或减。现在来看cout，它是一个ostream类对象。ostream类定义(iostream文件的另一个成员)</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>记那个盛夏</title>
    <url>/2022/12/30/%E8%AE%B0%E9%82%A3%E4%B8%AA%E7%9B%9B%E5%A4%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>暑假的时候，写了一小篇文字，现在空闲了，便依次发出来，以作留念。</p>
]]></content>
      <categories>
        <category>记录</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>时光</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Github.io+Hexo搭建个人博客</title>
    <url>/2021/04/10/%E5%9F%BA%E4%BA%8EGithub-io-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这篇文章是我搭建Blog的启蒙文章，我 <a href="https://jerrymiao2019.github.io">https://jerrymiao2019.github.io</a> 的Blog就是基于此搭建的。</p>
<span id="more"></span>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><p>在这里先跟大家说一些准备条件，有些同学可能一听到搭建博客就望而却步。弄个博客网站，不得有台服务器吗？不得搞数据库吗？不得注册域名吗？没事，如果都没有，那照样是能搭建一个博客的。</p>
<p>GitHub 是个好东西啊，它提供了 GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p>
<p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p>
<p>GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持。</p>
<p>所以说，基本上，先注册个 GitHub 账号就能搞了，下面我们来正式开始吧。</p>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如 NightTeam 的 GitHub 用户名就叫 NightTeam，那我就新建一个 nightteam.github.io，新建完成之后就可以进行后续操作了。</p>
<p>另外如果 GitHub 没有配置 SSH 连接的建议配置一下，这样后面在部署博客的时候会更方便。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/，可以安装">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p>
<p>安装完毕之后，确保环境变量配置好，能正常使用 <code>npm</code> 命令。</p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>接下来就需要安装 Hexo 了，这是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p>
<p>命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>
<p>安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>接下来我们使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p>
<p>首先使用如下命令创建项目：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 name 就是项目名，我这里要创建 NightTeam 的博客，我就把项目取名为 nightteam 了，用了纯小写，命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo init nightteam</span><br></pre></td></tr></table></figure>
<p>这样 nightteam 文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹，这些内容暂且先不用管是做什么的，我们先知道有什么，然后一步步走下去看看都发生了什么变化。</p>
<p>接下来我们首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p>
<p>然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure>
<p>运行之后命令行输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">INFO  <span class="built_in">Start</span> processing</span><br><span class="line">INFO  Hexo is running at http://localhost:<span class="number">4000</span> . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>它告诉我们在本地 4000 端口上就可以查看博客站点了，如图所示：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNeEtpY2lhODNyTkdJcmFaZGpTOGpGN0theEhGcEYwRzAxaWEyeE5kUjJDamljY0NIbnVEa3VDUU1oZy82NDA?x-oss-process=image/format,png" alt="null"></p>
<p>这样一个博客的架子就出来了，我们只用了三个命令就完成了。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p>
<p>那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p>
<p>部署命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。</p>
<p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> &#123;<span class="string">git</span> <span class="string">repo</span> <span class="string">ssh</span> <span class="string">address</span>&#125;</span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>我的就修改为如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:NightTeam/nightteam.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>好，那就让我们安装下这个插件，在项目目录下执行安装命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>安装成功之后，执行部署命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>运行结果类似如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">Counting objects: <span class="number">46</span>, done.</span><br><span class="line">Delta compression <span class="keyword">using</span> up to 8 threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">36</span>/<span class="number">36</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">46</span>/<span class="number">46</span>), <span class="number">507.66</span> KiB | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">46</span> (delta <span class="number">3</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving deltas: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line">To git@github.com:NightTeam/nightteam.github.io.git</span><br><span class="line"> * [<span class="type">new</span> <span class="type">branch</span>]      HEAD -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:NightTeam/nightteam.github.io.git.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>
<p>如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了，这时候我们访问一下 GitHub Repository 同名的链接，比如我的 NightTeam 博客的 Repository 名称取的是 nightteam.github.io，那我就访问 <a href="http://nightteam.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。">http://nightteam.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</a></p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNUElObWZ1UmQ3U0xuQjUxREtSdEtRR0QzeDI1SWdnT1d5TEhkWVBLNVM5R2hMOG1Udm1acHNRLzY0MA?x-oss-process=image/format,png" alt="null"></p>
<p>这时候我们去 GitHub 上面看看 Hexo 上传了什么内容，打开之后可以看到 master 分支有了这样的内容：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNdWliWDVhNTZBVDlCMVExMGliVEw0V1RyaHVYMTBBWGRBeER5QUxCSnFCMlNuM2dlQjhyU3ZuOUEvNjQw?x-oss-process=image/format,png" alt="null"></p>
<p>仔细看看，这实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p>
<p>这时候可能就有人有疑问了，那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p>
<p>具体的添加过程就很简单了，参加如下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git checkout <span class="literal">-b</span> source</span><br><span class="line">git add <span class="literal">-A</span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;init blog&quot;</span></span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure>
<p>成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。</p>
<h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><p>完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。</p>
<p>下面我就以自己的站点 NightTeam 为例，修改一些基本的配置，比如站点名、站点描述等等。</p>
<p>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">NightTeam</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">一个专注技术的组织</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">涉猎的主要编程语言为</span> <span class="string">Python、Rust、C++、Go，领域涵盖爬虫、深度学习、服务研发和对象存储等。</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;Python, Rust, C++, Go, 爬虫, 深度学习, 服务研发, 对象存储&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">NightTeam</span></span><br></pre></td></tr></table></figure>
<p>这里大家可以参照格式把内容改成自己的。</p>
<p>另外还可以设置一下语言，如果要设置为汉语的话可以将 language 的字段设置为 zh-CN，修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
<p>这样就完成了站点基本信息的配置，完成之后可以看到一些基本信息就修改过来了，页面效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNb3ZtODJ2SEZYZGpSc1dzSG1mSlVrVWFUcHBOZXhYOHB5bmpjM1YzNWpOazVocElxNGMxVlVRLzY0MA?x-oss-process=image/format,png" alt="null"></p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>目前来看，整个页面的样式个人感觉并不是那么好看，想换一个风格，这就涉及到主题的配置了。目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p>
<p>那么首先就让我们来安装下 Next 这个主题吧，目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。</p>
<p>主题的 GitHub 地址是：<a href="https://github.com/theme-next/hexo-theme-next，我们可以直接把">https://github.com/theme-next/hexo-theme-next，我们可以直接把</a> master 分支 Clone 下来。</p>
<p>首先命令行进入到项目的根目录，执行如下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p>
<p>然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNUjlTOWlhbVlVNzRJN1RJUzdHejM2NHptMXA2ekpiUnVsSlB0RWY3VDM4MGg2bnkwWGY2aWNKWFEvNjQw?x-oss-process=image/format,png" alt="null"></p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持，下面逐项道来。</p>
<p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure>
<p>刷新页面之后就会变成这种样式，如图所示：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNTWliQU90RDNaUUM4aWI0OXZrSURLeFVrc2hpYmlhSVVpYlV1RjJGRW56Mnp4TU1Pd2M1WEpFV01pY2RnLzY0MA?x-oss-process=image/format,png" alt="null"></p>
<p>另外还有几个可选项，比如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p>大家可以自行根据喜好选择。</p>
<h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p>
<p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net[1]，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。">https://realfavicongenerator.net[1]，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</a></p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p>
<p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure>
<p>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p>
<h3 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h3><p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 avatar.png 图片：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNbnhxUm9NTzc3Z3g3MnYxNTVrMGZuMEx3WDJLWVhMNnQwN0I3NkhtSnNhZVBqSEo4U1Ftc0JRLzY0MA?x-oss-process=image/format,png" alt="null"></p>
<p>将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这里有 rounded 选项是是否显示圆形，rotated 是是否带有旋转效果，大家可以根据喜好选择是否开启。</p>
<p>效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNdlY4T3NlektTb1dpYm1rUEF3UEpOWFA4bWR4aWNRaWFQQndCdjFmVEpEYUNpYlA2Y09xbTY3MGljbGcvNjQw?x-oss-process=image/format,png" alt="null"></p>
<p>配置完成之后就会显示头像。</p>
<h3 id="rss"><a href="#rss" class="headerlink" title="rss"></a>rss</h3><p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>作为程序猿，代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>
<p>修改前的代码样式：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNajhnckFzTEVETlFpY21kNlphSXVjZmdOU2p0VUNOcXhQbThudGlia2hLYWJjUk1aWGZhbFJzVlEvNjQw?x-oss-process=image/format,png" alt="null"></p>
<p>修改后的代码样式：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNcGliMDB2dURxbHN0VHBzUlEyaWNqalRlRHpQNUUwWXdSMm9qSlFXR0xqZ0F4RTNtZW8wNFVhbmcvNjQw?x-oss-process=image/format,png" alt="null"></p>
<p>嗯，个人觉得整体看起来逼格高了不少。</p>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。</p>
<p>具体的效果大家可以设置后根据喜好选择。</p>
<h3 id="reading-process"><a href="#reading-process" class="headerlink" title="reading_process"></a>reading_process</h3><p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改 _config.yml 如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure>
<p>设置之后显示效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNemxZVEY2UGVlNmlhaWF1RHgyUjVMRlB3cXdvSkJqcWZqWENhMkJPNlFXQWoyUjV0cWhrcTFiVHcvNjQw?x-oss-process=image/format,png" alt="null"></p>
<h3 id="bookmark"><a href="#bookmark" class="headerlink" title="bookmark"></a>bookmark</h3><p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>
<h3 id="github-banner"><a href="#github-banner" class="headerlink" title="github_banner"></a>github_banner</h3><p>在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/NightTeam/nightteam.github.io</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">NightTeam</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure>
<p>记得修改下链接 permalink 和标题 title，显示效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNZnZqUHViQjFuYUhtdnNLQVJBSGljZFFUN3M1bVUxNEhWRWljUEZya3ZzVUhZNnpTaWJjOGljMnJNdy82NDA?x-oss-process=image/format,png" alt="null"></p>
<p>可以看到在页面右上角显示了 GitHub 的图标，点击可以进去到 Repository 页面。</p>
<h3 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h3><p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p>
<p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p>
<p>作为一名程序员，我个人比较喜欢 gitalk，它是利用 GitHub 的 Issue 来当评论，样式也比较不错。</p>
<p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new，注册完毕之后拿到">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p>
<p>首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br></pre></td></tr></table></figure>
<p>主要是 comments.active 字段选择对应的名称即可。</p>
<p>然后找打 gitalk 配置，添加它的各项配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">NightTeam</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">nightteam.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> &#123;<span class="string">your</span> <span class="string">client</span> <span class="string">id</span>&#125; <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> &#123;<span class="string">your</span> <span class="string">client</span> <span class="string">secret</span>&#125; <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">germey</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
<p>配置完成之后 gitalk 就可以使用了，点击进入文章页面，就会出现如下页面：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNaWNMRDJQeVFTWVdLcWI3bzQxemliRUlqOEJWamlhYzdLcGxsVHk1Q280YjVoODN5QjBqT1FmSDNRLzY0MA?x-oss-process=image/format,png" alt="null"></p>
<p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p>
<h3 id="pangu"><a href="#pangu" class="headerlink" title="pangu"></a>pangu</h3><p>我个人有个强迫症，那就是写中文和英文的时候中间必须要留有间距，一个简单直接的方法就是中间加个空格，但某些情况下可能习惯性不加或者忘记加了，这就导致中英文混排并不是那么美观。</p>
<p>pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p>
<p>具体的修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><p>可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。</p>
<p>Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations。">https://theme-next.org/docs/third-party-services/math-equations。</a></p>
<p>所以我这里选择了 mathjax，通过修改配置即可启用：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>另外还有其他的插件支持，大家可以到官方文档查看。</p>
<h3 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h3><p>可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p>
<p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/next</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pjax <span class="built_in">source</span>/lib/pjax</span></span><br></pre></td></tr></table></figure>
<p>这样 pjax 就开启了，页面就可以实现无刷新加载了。</p>
<p>另外关于 Next 主题的设置还有挺多的，这里就介绍到这里了，更多的主题设置大家可以参考官方文档：<a href="https://theme-next.org/docs/。">https://theme-next.org/docs/。</a></p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>现在整个站点只有一篇文章，那么我们怎样来增加其他的文章呢？</p>
<p>这个很简单，只需要调用 Hexo 提供的命令即可，比如我们要新建一篇「HelloWorld」的文章，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure>
<p>创建的文章会出现在 <code>source/_posts</code> 文件夹下，是 MarkDown 格式。</p>
<p>在文章开头通过如下格式添加必要信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 # 自动创建，如 hello-world</span><br><span class="line">date: 日期 # 自动创建，如 2019-09-22 01:47:21</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>开头下方撰写正文，MarkDown 格式书写即可。</p>
<p>这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html。">https://hexo.io/zh-cn/docs/writing.html。</a></p>
<h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-09-26 16:44:17</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>我们可以自行添加一个 type 字段来指定页面的类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
<p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>这样重新本地启动看下页面状态，效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNWEx6eFZvYTVTWEFJMFBKaEFOeHhsSnVyQXNaWEFVSUV2ZWc4VjNjVjVTZzNhOUljTHNVb2x3LzY0MA?x-oss-process=image/format,png" alt="null"></p>
<p>可以看到左侧导航也出现了标签，点击之后右侧会显示标签的列表。</p>
<h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>然后同样地，会生成一个 source/categories/index.md 文件。</p>
<p>我们可以自行添加一个 type 字段来指定页面的类型：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>这样页面就会增加分类的支持，效果如下：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNNWlidjJ5V3FVVHRuRzE2b0tmSzBiNW1WendWcERrV3k2N1hZcmxEaWFvMEZ4UlBKUzg0bnNENkEvNjQw?x-oss-process=image/format,png" alt="null"></p>
<h2 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h2><p>很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p>
<p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后在项目的 _config.yml 里面添加搜索设置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>然后在主题的 _config.yml 里面修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>这里用的是 Local Search，如果想启用其他是 Search Service 的话可以参考官方文档：<a href="https://theme-next.org/docs/third-party-services/search-services。">https://theme-next.org/docs/third-party-services/search-services。</a></p>
<h2 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h2><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2019-09-22 10:41:27</span><br><span class="line">---</span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.nightteam.cn&gt;&quot;</span>&gt;</span>点击此处<span class="tag">&lt;/<span class="name">a</span>&gt;</span>返回首页。</span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span></span><br><span class="line">    NightTeam</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里面的一些相关信息和链接可以替换成自己的。</p>
<p>增加了这个 404 页面之后就可以</p>
<p>完成了上面的配置基本就完成了大半了，其实 Hexo 还有很多很多功能，这里就介绍不过来了，大家可以直接参考官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a> 查看更多的配置。</p>
<h2 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h2><p>最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>这样我们在部署发布的时候只需要执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure>
<p>就可以完成博客的更新了，非常简单。</p>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。</p>
<p>另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，如图所示：</p>
<p><img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9hMFlJdGVqSGFUQTFibmN3Y2liNWg1NnpGMTdMVFlraWFNV1JHOGFOODBLaWE3MEgyRWNPRnZwRmpPbEt0N3lrMWhFQ1VVSkE0NmYwTnRsVzVyVkpaSHF6Zy82NDA?x-oss-process=image/format,png" alt="null"></p>
<p>下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。</p>
<p>另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。</p>
<p>另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。</p>
<p>比如我就在 source 目录下新建了一个 CNAME 文件，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog.nightteam.cn</span><br></pre></td></tr></table></figure>
<p>这样避免了每次部署的时候自定义域名被清除的情况了。</p>
<p>以上就是从零搭建一个 Hexo 博客的流程，希望对大家有帮助。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><code>[1]</code> <a href="https://realfavicongenerator.net">https://realfavicongenerator.net</a>: <em><a href="https://realfavicongenerator.net/">https://realfavicongenerator.net/</a></em></p>
<p>-—</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>github.io</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
